{"version":3,"sources":["constants/actionTypes.js","reducers/postsReducers.js","reducers/indexReducers.js","api/index.js","actions/postsActions.js","appStyles.js","icons/bee.png","components/posts/postsStyles.js","components/posts/post/postStyles.js","components/posts/post/post.js","components/posts/posts.js","components/form/formStyles.js","components/form/form.js","App.js","index.js"],"names":["CREATE","UPDATE","DELETE","FETCH_ALL","LIKE","postActions","posts","action","type","payload","map","post","_id","filter","combineReducers","url","fetchPosts","axios","get","createPost","newPost","updatePost","id","updatedPost","patch","deletePost","delete","likePost","getPosts","dispatch","a","api","data","console","log","reversePosts","reverse","makeStyles","theme","navBar","backgroundColor","textAlign","alignItems","margin","justifyContent","color","borderRadius","display","flexDirection","bee","marginLeft","content","width","form","line","marginTop","marginBottom","mainContainer","postCard","media","height","paddingLeft","button","paddingBottom","paddingRight","Post","setCurrentId","classes","useStyles","useDispatch","Card","className","CardMedia","image","selectedFile","title","creator","moment","createdAt","fromNow","message","tags","tag","Button","style","onClick","likeCount","Posts","useSelector","state","length","CircularProgress","Container","Grid","root","spacing","paper","padding","flexWrap","fileInput","buttonSubmit","Form","currentId","useState","postData","setPostData","find","useEffect","clear","Paper","autoComplete","noValidate","onSubmit","e","preventDefault","Typography","variant","TextField","name","label","fullWidth","value","onChange","target","replace","split","multiple","onDone","base64","hide","hidden","nonHidden","HideContext","React","createContext","FormPost","useContext","FormToggle","setHide","App","stateHide","maxwidth","AppBar","position","align","src","alt","Grow","in","Provider","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.683913f0.chunk.js","sourcesContent":["// action constants\r\nexport const CREATE = 'CREATE';\r\nexport const UPDATE = 'UPDATE';\r\nexport const DELETE = 'DELETE';\r\nexport const FETCH_ALL = 'FETCH_ALL';\r\nexport const LIKE = 'LIKE';","// reducer for the posts\r\n// import action types\r\nimport { FETCH_ALL, DELETE, UPDATE, CREATE, LIKE } from '../constants/actionTypes';\r\n\r\nconst postActions = (posts = [], action) => {\r\n    switch (action.type) {\r\n        // fetches all posts\r\n        case FETCH_ALL:\r\n            // the payload for FETCH_ALL is all the posts from postsActions\r\n            return action.payload;\r\n        case CREATE:\r\n            // returns array of all existing posts + new post from payload\r\n            return [...posts, action.payload];\r\n        case UPDATE:\r\n        case LIKE:\r\n            return posts.map((post) => post._id === action.payload._id ? action.payload : post);\r\n        case DELETE:\r\n            return posts.filter((post) => post._id !== action.payload);\r\n        default:\r\n            return posts;\r\n    }\r\n}\r\n\r\nexport default postActions;","// combines all reducers\r\n// reducer is a function that takes state and action, and if\r\n//  action is equal to a keyword, the code is run\r\n\r\nimport { combineReducers } from 'redux';\r\nimport posts from './postsReducers';\r\n\r\nexport default combineReducers({\r\n    posts\r\n});","// Making api calls\r\n\r\n// Allows making http requests to external resources\r\nimport axios from 'axios';\r\n\r\n// url to backend\r\nconst url = 'https://bzzt-social-media.herokuapp.com/posts';\r\n\r\n// Gets all posts in the database\r\nexport const fetchPosts = () => axios.get(url);\r\n\r\n// Posts the new post into the backend url\r\nexport const createPost = (newPost) => axios.post(url, newPost);\r\n\r\n// Updates post and sends to backend url/id\r\nexport const updatePost = (id, updatedPost) => axios.patch(`${url}/${id}`, updatedPost);\r\n\r\n// Deletes posts\r\nexport const deletePost = (id) => axios.delete(`${url}/${id}`);\r\n\r\n// Likes posts\r\nexport const likePost = (id) => axios.patch(`${url}/${id}/likePost`);","// import action types\r\nimport { FETCH_ALL, DELETE, UPDATE, CREATE, LIKE } from '../constants/actionTypes';\r\n\r\n// import everything from actions as API\r\nimport * as api from '../api';\r\n\r\n// Action creators, functions that return actions\r\n// Because fetching posts take time, it is async\r\n\r\n// action for grabbing all the posts\r\nexport const getPosts = () => async (dispatch) => {\r\n    try {\r\n        // try grabbing data (posts)\r\n        const { data } = await api.fetchPosts();\r\n\r\n        // action needs type\r\n        // payload is the property that holds actual data in a redux action object\r\n        const action = { type: FETCH_ALL, payload: data }\r\n\r\n        // dispatching action to the store\r\n        dispatch(action);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const createPost = (newPost) => async (dispatch) => {\r\n    try {\r\n        // sending post api request to backend server\r\n        const { data } = await api.createPost(newPost);\r\n\r\n        // dispatches action to the store\r\n        dispatch({ type: CREATE, payload: data });\r\n        \r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const reversePosts = (reverse) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.fetchPosts();\r\n        if (reverse) {\r\n            dispatch({ type: FETCH_ALL, payload: data });\r\n        } else {\r\n            dispatch({ type: FETCH_ALL, payload: data.reverse() });\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const updatePost = (id, updatedPost) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.updatePost(id, updatedPost);\r\n        dispatch({ type: UPDATE, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n    try {\r\n        await api.deletePost(id);\r\n        dispatch({ type: DELETE, payload: id });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const likePost = (id) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.likePost(id);\r\n        dispatch({ type: LIKE, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n    navBar: {\r\n        backgroundColor: 'black',\r\n        textAlign: 'center',\r\n        alignItems: 'center',\r\n        margin: '40px 0',\r\n        justifyContent: 'center',\r\n        color: '#dac400',\r\n        borderRadius: '20px',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    bee: {\r\n        borderRadius: '10px',\r\n        marginLeft: '20px',\r\n    },\r\n    content: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    posts: {\r\n        marginLeft: '0',\r\n        width: '100%',\r\n    },\r\n    form: {\r\n        width: '100%',\r\n    },\r\n    line: {\r\n        margin: \"auto\",\r\n        marginTop: \"30px\",\r\n        marginBottom: \"30px\",\r\n        backgroundColor: \"black\",\r\n        width: \"90%\",\r\n    },\r\n}));","export default __webpack_public_path__ + \"static/media/bee.4a436364.png\";","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n    mainContainer: {\r\n        alignItems: 'center',\r\n    },\r\n}));","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n    postCard: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        borderRadius: '15px',\r\n        backgroundColor: \"black\",\r\n    },\r\n    media: {\r\n        width: 0,\r\n        height: 'auto',\r\n        paddingLeft: \"30%\",\r\n    },\r\n    content: {\r\n        paddingLeft: \"5%\",\r\n        backgroundColor: 'black',\r\n        color: '#dac400',\r\n        width: \"100%\",\r\n    },\r\n    line: {\r\n        margin: \"auto\",\r\n        marginTop: \"30px\",\r\n        marginBottom: \"30px\",\r\n        backgroundColor: \"black\",\r\n        width: \"90%\",\r\n    },\r\n    button: {\r\n        paddingBottom: \"175px\",\r\n        paddingRight: \"50px\",\r\n    },\r\n}));","import React from 'react';\r\nimport { Card, CardMedia, Button } from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport useStyles from './postStyles';\r\nimport { deletePost, likePost } from '../../../actions/postsActions';\r\n\r\n// receives post from posts.js and adds logic to the data\r\nconst Post = ({ post, setCurrentId }) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.postCard}>\r\n                <CardMedia className={classes.media} image={post.selectedFile} />\r\n                <div className={classes.content}>\r\n                    <h1>{post.title}</h1>\r\n                    <h2>By: {post.creator}</h2>\r\n                    <h5>{moment(post.createdAt).fromNow()}</h5>\r\n                    <h4>{post.message}</h4>\r\n                    <h4>{post.tags.map((tag) => `#${tag} `)}</h4>\r\n                </div>\r\n                <Button style={{color: 'white'}} onClick={() => dispatch(likePost(post._id))} className={classes.button}>Like {post.likeCount}</Button>\r\n                <Button style={{color: 'white'}} onClick={() => setCurrentId(post._id)} className={classes.button}>EDIT</Button>\r\n                <Button style={{color: 'white'}} onClick={() => dispatch(deletePost(post._id))} className={classes.button}>Delete</Button>\r\n            </Card>\r\n            <hr className={classes.line} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Container, CircularProgress, Grid, Button } from '@material-ui/core';\r\nimport useStyles from './postsStyles';\r\nimport { useSelector, useDispatch } from 'react-redux'; // Allows access to the global store\r\n\r\nimport Post from './post/post';\r\nimport { reversePosts } from './../../actions/postsActions';\r\n\r\nconst Posts = ({ setCurrentId }) => {\r\n    // from the store (state), grab posts (.posts)\r\n    // name of the posts is from indexReducers\r\n    const posts = useSelector((state) => state.posts);\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const buttonOldFirst = () => {\r\n        dispatch(reversePosts(true));\r\n    }\r\n\r\n    const buttonNewFirst = () => {\r\n        dispatch(reversePosts(false));\r\n    }\r\n\r\n    return (\r\n        // if no posts, spinning circle\r\n        // If there are posts, loop through the posts and return\r\n        //   each post separately into post.js\r\n        (posts.length === 0) ? <CircularProgress /> : (\r\n            <Container className={classes.mainContainer}>\r\n                <Button onClick={buttonOldFirst}>Oldest First</Button>\r\n                <Button onClick={buttonNewFirst}>Newest First</Button>\r\n                {posts.map((post) => (  \r\n                    <Grid key={post._id}>\r\n                        <Post post={post} setCurrentId={setCurrentId} />\r\n                    </Grid>\r\n                ))}\r\n            </Container>\r\n        )\r\n    )\r\n}\r\n\r\nexport default Posts;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n    root: {\r\n      '& .MuiTextField-root': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      backgroundColor: 'white',\r\n    },\r\n    form: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'center',\r\n    },\r\n    fileInput: {\r\n      width: '97%',\r\n      margin: '10px 0',\r\n    },\r\n    buttonSubmit: {\r\n      marginBottom: 10,\r\n    },\r\n  }));","import React, { useState, useEffect } from 'react';\r\nimport { Paper, TextField, Button, Typography } from '@material-ui/core';\r\nimport FileBase from 'react-file-base64';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport useStyles from './formStyles';\r\nimport { getPosts, createPost, updatePost } from './../../actions/postsActions';\r\n\r\nconst Form = ({ currentId, setCurrentId }) => {\r\n    // postData object\r\n    // postData is current state, and setPostData allows updating the state\r\n    const [postData, setPostData] = useState({ creator: '', title: '', message: '', tags: '', selectedFile: ''});\r\n    // if there is a currentId, then find the post, if not, return null\r\n    const post = useSelector((state) => currentId ? state.posts.find((post) => post._id === currentId) : null);\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n\r\n    // when 'post' changes, run this side effect\r\n    useEffect(() => {\r\n        if(post) setPostData(post);\r\n    }, [post]);\r\n\r\n    // handler functions\r\n    const handleSubmit = (e) => {\r\n        // prevents browser refreshing\r\n        e.preventDefault();\r\n\r\n        if (currentId) {\r\n            // dispatches the updated post if currentid present\r\n            dispatch(updatePost(currentId, postData));\r\n            dispatch(getPosts());\r\n        } else {\r\n            // dispatches submit action of the data\r\n            dispatch(createPost(postData));\r\n        }\r\n\r\n        clear();\r\n    }\r\n\r\n    const clear = () => {\r\n        setCurrentId(null);\r\n        setPostData({ creator: '', title: '', message: '', tags: '', selectedFile: ''});\r\n    }\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n                <Typography variant=\"h6\">Create a Post</Typography>\r\n                <TextField \r\n                    name=\"creator\" \r\n                    variant=\"outlined\" \r\n                    label=\"Creator\" \r\n                    fullWidth \r\n                    // puts the value in the state, in postData\r\n                    value={postData.creator} \r\n                    // ...postData separates the postData so only creator is changed\r\n                    onChange={(e) => setPostData({ ...postData, creator: e.target.value})} \r\n                />\r\n                <TextField \r\n                    name=\"title\" \r\n                    variant=\"outlined\" \r\n                    label=\"Title\" \r\n                    fullWidth \r\n                    value={postData.title} \r\n                    onChange={(e) => setPostData({ ...postData, title: e.target.value})} \r\n                />\r\n                <TextField \r\n                    name=\"message\" \r\n                    variant=\"outlined\" \r\n                    label=\"Message\" \r\n                    fullWidth \r\n                    value={postData.message} \r\n                    onChange={(e) => setPostData({ ...postData, message: e.target.value})} \r\n                />\r\n                <TextField \r\n                    name=\"tags\" \r\n                    variant=\"outlined\" \r\n                    label=\"Tags\" \r\n                    fullWidth \r\n                    value={postData.tags} \r\n                    onChange={(e) => setPostData({ ...postData, tags: e.target.value.replace(/\\s/g, '').split(',')})} \r\n                />\r\n                <div className={classes.fileInput}>\r\n                    <FileBase \r\n                        type=\"file\"\r\n                        multiple={false}\r\n                        onDone={({base64}) => setPostData({ ...postData, selectedFile: base64 })}\r\n                    />\r\n                </div>\r\n                <Button className={classes.buttonSubmit} fullWidth color=\"primary\" variant=\"contained\" type=\"submit\">Submit</Button>\r\n                <Button onClick={clear} fullWidth color=\"secondary\" variant=\"contained\">Clear</Button>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { useEffect, useState } from 'react';\r\nimport { Container, Typography, AppBar, Grow, Button } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { getPosts } from './actions/postsActions';\r\nimport useStyles from './appStyles.js';\r\nimport bee from './icons/bee.png';\r\nimport Posts from './components/posts/posts';\r\nimport Form from './components/form/form';\r\nimport './index.css';\r\n\r\nconst hide = {\r\n    hidden: {\r\n        display: \"none\"\r\n    },\r\n    nonHidden: {\r\n        display: \"block\"\r\n    },\r\n}\r\n\r\nconst HideContext = React.createContext(hide.hidden);\r\n\r\nconst FormPost = () => {\r\n    const { hide } = React.useContext(HideContext);\r\n    // brings in currentId from state in App as both form and posts use it\r\n    const [currentId, setCurrentId] = useState(null);\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    // useEffect lets you preform side effects in function components\r\n    useEffect(() => {\r\n        // dispatches the action for getting posts, goes to reducer logic\r\n        dispatch(getPosts());\r\n        // when currentId changed (cleared in form), dispatches getPosts()\r\n    }, [currentId, dispatch]);\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <FormToggle />\r\n            </Container>\r\n            <Container className={classes.form} style={{display: hide.display}}>\r\n                <Form currentId={currentId} setCurrentId={setCurrentId} />\r\n            </Container>\r\n            <hr className={classes.line} />\r\n            <Container className={classes.posts}>\r\n                <Posts setCurrentId={setCurrentId} />\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst FormToggle = () => {\r\n    const { setHide } = React.useContext(HideContext);\r\n\r\n    const hideButton = () => {\r\n        setHide(\"hidden\")\r\n    }\r\n\r\n    const unHideButton = () => {\r\n        setHide(\"nonHidden\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={hideButton}>Hide Form</Button>\r\n            <Button onClick={unHideButton}>Show Form</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst App = () => {\r\n    const classes = useStyles();\r\n    const [stateHide, setHide] = React.useState(\"hidden\");\r\n\r\n    return (\r\n        <Container maxwidth=\"lg\">\r\n            <AppBar className={classes.navBar} position=\"static\">\r\n                <Typography align=\"center\" variant=\"h2\">Bzzt</Typography>\r\n                <img className={classes.bee} src={bee} alt=\"bee\" height=\"60\" width=\"60\" />\r\n            </AppBar>\r\n            <Grow in>\r\n                <Container className={classes.content}>\r\n                    <HideContext.Provider value={{ hide: hide[stateHide], setHide }}>\r\n                        <FormPost />\r\n                    </HideContext.Provider>\r\n                </Container>\r\n            </Grow>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default App;","// Connecting react application to index.html file\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// initializing redux\r\n// Keeps store and allows access to the store from anywhere in the app\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducers from './reducers/indexReducers';\r\n\r\nimport App from './App';\r\n\r\n// createStore creates a redux store that holds the complete state tree of you app\r\n// compose composes functions\r\n// applyMiddleware applies middleware (thunk in this case)\r\n// Middleware allows you to wrap the store's dispatch function\r\n// thunk is a middleware that allows you to return functions rather than\r\n//   just actions\r\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\r\n\r\n// Connecting to the div with the id of root\r\nReactDOM.render(\r\n    // Makes redux store available to App\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}